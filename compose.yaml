# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      target: development
    ports:
      - 8080:8080
      - 443:443
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro
      - .:/source
      - /var/run/docker.sock:/var/run/docker.sock
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    depends_on:
      db:
        condition: service_healthy
      pgadmin:
        condition: service_started
    develop:
      watch:
        - action: sync+restart
          path: .
          target: /source
          ignore:
            - AEBackend/obj
            - AEBackend/app
            - AEBackend/bin
    networks:
      - dev

  db:
    image: postgis/postgis:12-3.4
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432:5432
    healthcheck:
      # test: ["CMD", "pg_isready"]
      test: pg_isready -h localhost -U postgres
      interval: 10s
      timeout: 5s
      retries: 120
    networks:
      - dev
  pgadmin:
    container_name: container-pgadmin
    image: dpage/pgadmin4
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    restart: unless-stopped
    networks:
      - dev

volumes:
  db-data:
secrets:
  db-password:
    file: AEBackend/db/password.txt

networks:
  dev:
    driver: bridge
